@code {
    [Parameter] public IEnumerable<MaintenanceScheduleResponseDto> Schedules { get; set; }
    [Parameter] public List<VehicleResponseDto> Vehicles { get; set; }
    [Parameter] public Func<string, string> GetScheduleBadgeClass { get; set; }
    [Parameter] public Func<string, string> GetScheduleDisplay { get; set; }
    [Parameter] public EventCallback<int> OnEdit { get; set; }
    [Parameter] public EventCallback<int> OnDetails { get; set; }
}

<div class="card shadow-sm">
    <div class="card-header d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
            <i class="bi bi-calendar-event me-1"></i> Aanstaande onderhoud
        </h5>
        <small class="text-muted">Oudste eerst</small>
    </div>
    <div class="card-body p-0">
        @if (!Schedules.Any())
        {
            <div class="p-3 text-center text-muted">
                <i class="bi bi-calendar-check" style="font-size: 1.5rem;"></i>
                <p class="mt-2 mb-0">Geen aankomend onderhoud</p>
            </div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th>Voertuig</th>
                            <th>Datum</th>
                            <th>Status</th>
                            <th>Acties</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var schedule in Schedules)
                        {
                            var vehicle = Vehicles.FirstOrDefault(v => v.Id == schedule.VehicleId);
                            <tr class="@(schedule.NextMaintenanceDueDate < DateTime.Now ? "table-warning" : "")">
                                <td>
                                    @if (vehicle != null)
                                    {
                                        <div class="fw-bold">@vehicle.LicensePlate</div>
                                        <div class="small text-muted">@vehicle.Model</div>
                                    }
                                    else
                                    {
                                        <span class="text-danger">Voertuig niet gevonden</span>
                                    }
                                </td>
                                <td>@schedule.NextMaintenanceDueDate.ToString("dd-MM-yyyy")</td>
                                <td>
                                    <span class="badge @GetScheduleBadgeClass(schedule.Status)">
                                        @GetScheduleDisplay(schedule.Status)
                                    </span>
                                </td>
                                <td class="text-end">
                                    <div class="btn-group btn-group-sm">
                                        <button class="btn btn-outline-primary"
                                                @onclick="() => OnEdit.InvokeAsync(schedule.Id)"
                                                title="Bewerken">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <button class="btn btn-outline-secondary"
                                                @onclick="() => OnDetails.InvokeAsync(schedule.Id)"
                                                title="Details">
                                            <i class="bi bi-eye"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>
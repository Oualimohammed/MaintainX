@page "/maintenance-logs"
@attribute [Authorize(Roles = "Mechanic,Admin")]
@inject IMaintenanceLogService MaintenanceService
@inject IVehicleService VehicleService
@inject IMaintenanceScheduleService ScheduleService
@inject IJSRuntime JsRuntime
@inject HttpClient Http



@code {
    private IEnumerable<MaintenanceLogResponseDto> logs = Enumerable.Empty<MaintenanceLogResponseDto>();
    private List<VehicleResponseDto> vehicles = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            vehicles = (await VehicleService.GetAllAsync()).ToList();
            logs = await MaintenanceService.GetAllAsync();
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Fout bij laden: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private async Task DownloadFile(int logId, string fileName)
    {
        try
        {
            var response = await Http.GetAsync($"/api/MaintenanceLog/{logId}/download?fileName={Uri.EscapeDataString(fileName)}");

            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsByteArrayAsync();
                var base64 = Convert.ToBase64String(content);

                var mimeType = GetMimeType(fileName);
                var dataUri = $"data:{mimeType};base64,{base64}";

                await JsRuntime.InvokeVoidAsync("downloadFile", fileName, dataUri);
            }
            else
            {
                await JsRuntime.InvokeVoidAsync("alert", "Download mislukt: " + response.StatusCode);
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Fout bij downloaden: {ex.Message}");
        }
    }

    private string GetMimeType(string fileName)
    {
        var ext = Path.GetExtension(fileName).ToLowerInvariant();
        return ext switch
        {
            ".pdf" => "application/pdf",
            ".jpg" or ".jpeg" => "image/jpeg",
            ".png" => "image/png",
            ".doc" or ".docx" => "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
            ".xls" or ".xlsx" => "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            ".txt" => "text/plain",
            _ => "application/octet-stream"
        };
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Voltooid" => "bg-success",
            "Gepland" => "bg-warning",
            "Geannuleerd" => "bg-secondary",
            _ => "bg-info"
        };
    }

    private async Task UploadFile(int logId, InputFileChangeEventArgs e)
    {
        var file = e.GetMultipleFiles().FirstOrDefault();
        if (file == null) return;

        try
        {
            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(file.OpenReadStream(10 * 1024 * 1024)); // Max 10MB
            content.Add(fileContent, "file", file.Name);

            var response = await Http.PostAsync($"/api/MaintenanceLog/{logId}/attachments", content);

            if (response.IsSuccessStatusCode)
            {
                await LoadData();
                await JsRuntime.InvokeVoidAsync("alert", "Bestand succesvol geüpload!");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JsRuntime.InvokeVoidAsync("alert", $"Fout bij uploaden: {error}");
            }
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Fout bij uploaden: {ex.Message}");
        }
    }

    private string GetFileIconClass(string ext) => ext switch
    {
        ".pdf" => "bi bi-file-earmark-pdf text-danger",
        ".jpg" or ".jpeg" or ".png" => "bi bi-file-earmark-image text-info",
        ".doc" or ".docx" => "bi bi-file-earmark-word text-primary",
        ".xls" or ".xlsx" => "bi bi-file-earmark-excel text-success",
        _ => "bi bi-paperclip"
    };

    private string ShortenFileName(string name, int maxLength)
    {
        if (name.Length <= maxLength) return name;
        return name.Substring(0, maxLength) + "...";
    }


    private async Task CompleteLog(MaintenanceLogResponseDto log)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm",
            $"Weet u zeker dat u dit onderhoud wilt markeren als voltooid?");

        if (!confirmed) return;

        try
        {
            // Update log
            var updatedLog = new MaintenanceLogRequestDto
            {
                VehicleId = log.VehicleId,
                MaintenanceDate = log.MaintenanceDate,
                Description = log.Description,
                Status = "Voltooid",
                IsScheduled = log.IsScheduled,
                AttachmentPaths = log.AttachmentPaths?.ToList() ?? new List<string>()
            };

            await MaintenanceService.UpdateAsync(log.Id, updatedLog);

            // Update related schedule if exists
            if (log.IsScheduled)
            {
                var schedules = await ScheduleService.GetAllAsync();
                var relatedSchedule = schedules.FirstOrDefault(s =>
                    s.VehicleId == log.VehicleId &&
                    s.NextMaintenanceDueDate.Date == log.MaintenanceDate.Date);

                if (relatedSchedule != null)
                {
                    var updatedSchedule = new MaintenanceScheduleRequestDto
                    {
                        VehicleId = relatedSchedule.VehicleId,
                        LastMaintenanceDate = log.MaintenanceDate,
                        NextMaintenanceDueDate = relatedSchedule.NextMaintenanceDueDate,
                        MileageAtLastMaintenance = relatedSchedule.MileageAtLastMaintenance,
                        NextMaintenanceMileage = relatedSchedule.NextMaintenanceMileage,
                        Status = "Completed",
                        Notes = relatedSchedule.Notes
                    };

                    await ScheduleService.UpdateAsync(relatedSchedule.Id, updatedSchedule);
                }
            }

            await LoadData();
            await JsRuntime.InvokeVoidAsync("alert", "Onderhoud succesvol gemarkeerd als voltooid!");
        }
        catch (Exception ex)
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Fout: {ex.Message}");
        }
    }

    private async Task DeleteLog(int id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm",
            "Weet u zeker dat u dit log wilt verwijderen?");

        if (confirmed)
        {
            try
            {
                await MaintenanceService.DeleteAsync(id);
                await LoadData();
            }
            catch (Exception ex)
            {
                await JsRuntime.InvokeVoidAsync("alert", $"Fout: {ex.Message}");
            }
        }
    }
}